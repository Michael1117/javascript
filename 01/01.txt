4.6 执行环境  作用域链

执行环境(execution context) 是javascript 中最为重要的一个概念。
执行环境定义了变量或函数有权访问的其他数据,决定了它们各自的行为。每一个执行环境都有一个与之关联的变量对象,环境中定义的所有变量和函数都保存在这个对象中。虽然我们的代码无法访问这个对象,但是解析器在处理数据时会在后台执行它.

全局执行环境是最外围的一个执行环境。根据ECMAScript实现所在的宿主环境不同,表示执行环境的对象也不一样。

每一个函数都有自己的执行环境。当执行流进一个函数时,函数的环境就会被推入一个环境栈中。而在函数执行之后,栈将其环境弹出,把控制权返还给之前的执行环境。当代码在一个环境中执行时, 会创建变量对象的一个作用域(scope chain) 。作用域链的用途,是保证对执行环境有权访问的所有变量和函数的有序访问

4.7 垃圾回收  块级作用域

javascript 是一门具有自动垃圾收集机制的编程语言。开发人员不必关心内存分配和回收问题。

- 离开作用域的值将被自动标记为可以回收, 因此将在垃圾收集期间被删除。标记清除是目前主流的垃圾收集算法。
这种算法的思想是给当前不使用的值加上标记, 然后回收其内存.

javascript 里面没有块级作用域的概念，和c,java等高级语言不同。

javascript模拟块级作用域
